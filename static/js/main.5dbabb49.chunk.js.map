{"version":3,"sources":["components/Navigation.js","components/characters/CharacterCard.js","components/characters/CharacterDetails.js","redux/actions/CharacterActions.js","js/api.js","components/characters/CharactersContainer.js","redux/reducers/CharactersReducer.js","redux/store.js","components/search/AdvancedSearch.js","components/Home.js","App.js","serviceWorker.js","index.js","assets/rick-and-morty-logo.png","assets/wallpaper1.jpg","assets/wallpaper2.jpg","assets/wallpaper3.jpg"],"names":["Navigation","props","className","src","logo","alt","height","style","marginLeft","search","placeholder","type","onChange","to","activeClassName","CharacterCard","interactive","elevation","Elevation","THREE","name","width","imgSrc","intent","onClick","id","CharacterDetails","character","location","origin","icon","onClose","handleDetailsToggle","title","autoFocus","canEscapeKeyClose","canOusideClickClose","enforceFocus","hasBackdrop","isOpen","detailsToggle","image","status","gender","species","SELECT_SAVED_CHARACTER","SELECT_NEW_CHARACTER","UNSELECT_CHARACTER","request","requestStr","a","async","axios","get","res","response","data","CharactersContainer","useState","characters","setCharacters","nextPage","setNextPage","hasMore","setHasMore","setDetailsToggle","selectedCharacter","useSelector","state","savedCharacters","dispatcher","useDispatch","useEffect","query","reqData","results","info","next","initialRequest","undefined","find","c","payload","charactersCards","map","toLowerCase","includes","key","dataLength","length","loader","initialState","charactersReducer","action","store","createStore","CharactersReducer","window","__REDUX_DEVTOOLS_EXTENSION__","AdvancedSearch","queryObject","setQueryObject","queryString","setQueryString","searchToggle","setSearchToggle","handleChange","event","target","value","onSubmit","e","preventDefault","Object","keys","forEach","str","URLSearchParams","align","dir","Home","AutoplaySlider","withAutoplay","AwesomeSlider","cssModule","AwsSliderStyles","play","cancelOnInteraction","interval","data-src","wallpaper1","wallpaper2","wallpaper3","App","setSearch","exact","path","Boolean","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5dbabb49.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../assets/rick-and-morty-logo.png'\nimport { NavLink } from 'react-router-dom';\n\nexport default function Navigation(props) {\n    return (\n        <nav className=\"bp3-navbar bp3-dark navbar\">\n            <div className=\"navbar-content rick-and-morty-navbar\">\n                <div className=\"bp3-navbar-group bp3-align-left\">\n                    <img src={logo} alt=\"Rick and Morty's logo\" height=\"85%\" />\n                </div>\n\n                <div className=\"bp3-navbar-group bp3-align-left\" style={{marginLeft:\"20px\"}}>\n                    {props.search &&\n                        <input className=\"bp3-input navbar-input\" placeholder=\"Search\" type=\"text\" onChange={props.onChange}/>\n                    }\n                </div>\n\n                <div className=\"bp3-navbar-group bp3-align-right\">\n                    <NavLink to=\"/\" className=\"navbar-link\" activeClassName=\"navbar-link-active\"><button className=\"bp3-button bp3-minimal bp3-icon-home\">Home</button></NavLink>\n                    <NavLink to=\"/characters\" className=\"navbar-link\" activeClassName=\"navbar-link-active\"><button className=\"bp3-button bp3-minimal bp3-icon-user\">Characters</button></NavLink>\n                    <NavLink to=\"/advanced-search\" className=\"navbar-link\" activeClassName=\"navbar-link-active\"><button className=\"bp3-button bp3-minimal bp3-icon-search\">Advanced Search</button></NavLink>\n                    <span className=\"bp3-navbar-divider\"></span>\n\n                </div>\n            </div>\n        </nav>\n\n\n    );\n}\n","import React from 'react';\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\n\nexport default function CharacterCard(props) {\n    return (\n        <Card className=\"card-component\" interactive={true} elevation={Elevation.THREE}>\n            <h3 className=\"bp3-heading card-title\">{props.name}</h3>\n            <hr width=\"100%\" />\n            <img src={props.imgSrc} alt={props.name} />\n            <Button intent=\"success\" onClick={() => props.onClick(props.id)}>More details</Button>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { Drawer } from \"@blueprintjs/core\";\n\nexport default function CharacterDetails(props) {\n  const character = props.character;\n  const location = character.location;\n  const origin = character.origin;\n\n  return (\n    <Drawer\n      icon=\"info-sign\"\n      onClose={props.handleDetailsToggle}\n      title={character.name}\n      autoFocus={true}\n      canEscapeKeyClose={true}\n      canOusideClickClose={true}\n      enforceFocus={true}\n      hasBackdrop={true}\n      isOpen={props.detailsToggle}>\n        \n      <div className=\"character-details-container\">\n\n        <img src={character.image} alt={character.name} />\n\n        <table className=\"bp3-html-table\">\n          <thead>\n            <tr>\n              <td><h3>Basic Information</h3></td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th>Status</th>\n              <td>{character.status}</td>\n            </tr>\n            <tr>\n              <th>Gender</th>\n              <td>{character.gender}</td>\n            </tr>\n            <tr>\n              <th>Species</th>\n              <td>{character.species}</td>\n            </tr>\n            {(character.type !== \"\") && <tr>\n              <th>Type</th>\n              <td>{character.type}</td>\n            </tr>}\n            <tr>\n              <th>Location</th>\n              <td>{location.name}</td>\n            </tr>\n            <tr>\n              <th>Origin</th>\n              <td>{origin.name}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n\n    </Drawer>\n  );\n}\n","export const SELECT_SAVED_CHARACTER = \"SELECT_SAVED_CHARACTER\"\nexport const SELECT_NEW_CHARACTER = \"SELECT_NEW_CHARACTER\"\nexport const UNSELECT_CHARACTER = \"UNSELECT_CHARACTER\"","import axios from 'axios';\n\nexport const request = async (requestStr) => {\n    const res = await axios.get(requestStr)\n    return {response: res.data}\n    \n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport CharacterCard from './CharacterCard';\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport CharacterDetails from './CharacterDetails';\nimport { UNSELECT_CHARACTER, SELECT_SAVED_CHARACTER, SELECT_NEW_CHARACTER } from '../../redux/actions/CharacterActions';\nimport { request } from '../../js/api'\n\nexport default function CharactersContainer(props) {\n    const [characters, setCharacters] = useState([]);\n    const [nextPage, setNextPage] = useState(\"\");\n    const [hasMore, setHasMore] = useState(true)\n    const [detailsToggle, setDetailsToggle] = useState(false)\n\n    const selectedCharacter = useSelector(state => state.selectedCharacter);\n    const savedCharacters = useSelector(state => state.savedCharacters);\n    const dispatcher = useDispatch();\n    const api = \"https://rickandmortyapi.com/api/character/\"\n\n    useEffect(() => {\n        const initialRequest = async () => {\n            const reqData = await request(api + props.query);\n            setCharacters(reqData.response.results);\n            setNextPage(reqData.response.info.next);\n        }\n        initialRequest();\n    }, [props.query])\n\n    const getCharacters = async () => {\n        const reqData = await request(nextPage);\n        if (reqData.response.results !== undefined) {\n            setCharacters([...characters, ...reqData.response.results]);\n            setNextPage(reqData.response.info.next)\n        } else {\n            setHasMore(false);\n        }\n    }\n\n    const handleDetailsToggle = (id) => {\n        detailsToggle ?\n            dispatcher({ type: UNSELECT_CHARACTER }) :\n            savedCharacters.find(c => c.id === id) === undefined ?\n                dispatcher({ type: SELECT_NEW_CHARACTER, payload: { character: characters.find(c => c.id === id) } }) :\n                dispatcher({ type: SELECT_SAVED_CHARACTER, payload: { id: id } });\n        setDetailsToggle(!detailsToggle);\n    }\n\n    const charactersCards =\n        characters.map((c) => {\n            if (props.search !== \"\") {\n                if (c.name.toLowerCase().includes(props.search.toLowerCase())) {\n                    return (\n                        <CharacterCard\n                            imgSrc={c.image}\n                            id={c.id}\n                            name={c.name}\n                            onClick={(id) => handleDetailsToggle(id)}\n                            key={c.id}\n                        />)\n                } else return \"\";\n            } return (\n                <CharacterCard\n                    imgSrc={c.image}\n                    id={c.id}\n                    name={c.name}\n                    onClick={(id) => handleDetailsToggle(id)}\n                    key={c.id}\n                />\n            )\n        })\n\n    return (\n        <div>\n            {detailsToggle &&\n                <CharacterDetails\n                    handleDetailsToggle={handleDetailsToggle}\n                    detailsToggle={detailsToggle}\n                    character={selectedCharacter}\n                />}\n\n            <div className=\"card-container\">\n                <InfiniteScroll\n                    dataLength={characters.length}\n                    next={getCharacters}\n                    hasMore={hasMore}\n                    loader={<h4>Loading...</h4>}>\n                    {charactersCards}\n                </InfiniteScroll>\n            </div>\n        </div>\n    );\n}\n","import { SELECT_NEW_CHARACTER, SELECT_SAVED_CHARACTER, UNSELECT_CHARACTER } from \"../actions/CharacterActions\"\n\nconst initialState = {\n    selectedCharacter: {},\n    savedCharacters: []\n};\n\nconst charactersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SELECT_NEW_CHARACTER:\n            return {\n                selectedCharacter: action.payload.character,\n                savedCharacters: [...state.savedCharacters, action.payload.character]\n            }\n        case SELECT_SAVED_CHARACTER:\n            return{\n                ...state,\n                selectedCharacter: state.savedCharacters.find(character => character.id === action.payload.id)\n            }\n        case UNSELECT_CHARACTER:\n            return{\n                ...state,\n                selectedCharacter:{}\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport default charactersReducer;","import { createStore } from \"redux\";\nimport CharactersReducer from \"./reducers/CharactersReducer\";\n\n\nconst store = createStore(CharactersReducer,\nwindow.__REDUX_DEVTOOLS_EXTENSION__ && \nwindow.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n","import React, { useState } from 'react';\nimport { Button } from '@blueprintjs/core'\nimport CharactersContainer from '../characters/CharactersContainer';\n\nexport default function AdvancedSearch() {\n    const [queryObject, setQueryObject] = useState({\n        name: \"\",\n        type: \"\",\n        gender: \"\",\n        status: \"\",\n        species: \"\"\n    })\n\n    const [queryString, setQueryString] = useState(\"\")\n    const [searchToggle, setSearchToggle] = useState(false)\n\n    const handleSubmit = (e) => {\n        setSearchToggle(false);\n        e.preventDefault();\n        setSearchToggle(true);\n        Object.keys(queryObject).forEach((key) => (queryObject[key] === \"\") && delete queryObject[key]);\n        const str = \"?\" + new URLSearchParams(queryObject)\n        setQueryString(str);\n    }\n\n    const handleChange = (event) => {\n        setQueryObject({\n            ...queryObject,\n            [event.target.id]: event.target.value\n        })\n    }\n\n    return (\n        <div>\n            <div className=\"search-container\">\n                <h1>Advanced Search</h1>\n                <br />\n                <form onSubmit={handleSubmit}>\n                    <div className=\"search-filters\">\n                        <table className=\"search-filters-table\">\n                            <tbody align=\"center\">\n                                <tr>\n                                    <td>Name</td>\n                                    <td>Species</td>\n                                    <td>Type</td>\n                                </tr>\n                                <tr>\n                                    <td><input id=\"name\" value={queryObject.name} onChange={handleChange} className=\"bp3-input bp3-round\" type=\"text\" placeholder=\"Text input\" dir=\"auto\" /></td>\n                                    <td><input id=\"species\" value={queryObject.species} onChange={handleChange} className=\"bp3-input bp3-round\" type=\"text\" placeholder=\"Text input\" dir=\"auto\" /></td>\n                                    <td><input id=\"type\" value={queryObject.type} onChange={handleChange} className=\"bp3-input bp3-round\" type=\"text\" placeholder=\"Text input\" dir=\"auto\" /></td>\n                                </tr>\n                            </tbody>\n                            <tbody>\n                                <tr>\n                                    <td>Status</td>\n                                    <td>Gender</td>\n                                </tr>\n                                <tr>\n                                    <td><div className=\"bp3-select\">\n                                        <select id=\"status\" onChange={handleChange}>\n                                            <option value=\"\">Choose status...</option>\n                                            <option value=\"Alive\">Alive</option>\n                                            <option value=\"Dead\">Dead</option>\n                                            <option value=\"unknown\">unknown</option>\n                                        </select>\n                                    </div></td>\n                                    <td><div className=\"bp3-select\">\n                                        <select id=\"gender\" onChange={handleChange}>\n                                            <option value=\"\">Choose gender...</option>\n                                            <option value=\"Female\">Female</option>\n                                            <option value=\"Male\">Male</option>\n                                            <option value=\"Genderless\">Genderless</option>\n                                            <option value=\"unknown\">unknown</option>\n                                        </select>\n                                    </div></td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <Button type=\"submit\" intent=\"primary\" >Search</Button>\n                    </div>\n                </form>\n            </div >\n            {searchToggle &&\n                <CharactersContainer query={queryString} search=\"\"/>\n            }\n        </div>\n    );\n}\n","import React from 'react';\nimport AwesomeSlider from 'react-awesome-slider';\nimport AwsSliderStyles from 'react-awesome-slider/src/styles';\nimport withAutoplay from 'react-awesome-slider/dist/autoplay';\nimport logo from '../assets/rick-and-morty-logo.png';\nimport wallpaper1 from '../assets/wallpaper1.jpg';\nimport wallpaper2 from '../assets/wallpaper2.jpg';\nimport wallpaper3 from '../assets/wallpaper3.jpg';\n\nexport default function Home() {\n    const AutoplaySlider = withAutoplay(AwesomeSlider);\n\n    return (\n        <div className=\"home-container\">\n            <img src={logo}></img>\n            <AutoplaySlider\n                cssModule={AwsSliderStyles}\n                play={true}\n                cancelOnInteraction={false}\n                interval={5000}>\n                <div data-src={wallpaper1} />\n                <div data-src={wallpaper2} />\n                <div data-src={wallpaper3} />\n            </AutoplaySlider>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { Provider } from 'react-redux'\nimport Navigation from './components/Navigation'\nimport CharactersContainer from './components/characters/CharactersContainer';\nimport store from './redux/store';\nimport { Switch, Route } from 'react-router-dom'\nimport AdvancedSearch from './components/search/AdvancedSearch';\nimport Home from './components/Home';\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  }\n\n  return (\n    <Provider store={store}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Navigation search={false} />\n          <Home />\n        </Route>\n        <Route path=\"/characters\">\n          <Navigation search={true} onChange={handleChange} />\n          <CharactersContainer query=\"\" search={search} />\n        </Route>\n        <Route path=\"/advanced-search\">\n          <Navigation search={false} />\n          <AdvancedSearch />\n        </Route>\n      </Switch>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router basename=\"/\">\n        <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/rick-and-morty-logo.dc06f50f.png\";","module.exports = __webpack_public_path__ + \"static/media/wallpaper1.b90bffc4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wallpaper2.58351c5b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wallpaper3.b7a3751c.jpg\";"],"sourceRoot":""}